#! /bin/bash -xe

#
# Script to build binary packages from prepared source packages in chroot
# environment.
#
# Local build and local external repositories are supported.
#
# ==== mock preparation ====
#
# moduser -a -A mock $LOGIN
# usermod -a -G mock $LOGIN
#
# Tools: mock rpm-build (see also 'pkg-repo' script)
#
# ==== pbuilder preparation ====
#
# ln -s ~jenkins/.pbuilderrc /root/.pbuilderrc
# pbuilder --create --hookdir `pwd`/pbuilder --distribution jessie --basetgz /var/cache/pbuilder/debian-8-x86_64.tgz
#
# Tools: pbuilder (see also 'pkg-repo' script)
#

CMD='build'
DEB_DISTRO=${DEB_DISTRO:-stable}
# GPG key URL (only for local yum repos)
GPG_KEY_URL='http://scientific.zcu.cz/repos/jenkins-builder.asc'
# build GPG key ID (pbuilder only)
KEY_ID=${KEY_ID:-'64FA8786'}
LAUNCHDIR=`dirname "$0"`
LAUNCHDIR=`(cd "$LAUNCHDIR"; pwd)`
LOCKFILE='/tmp/pkg-build-mock.lock'
do_clean=0
do_image=0
do_sign=1
# workaround bugs for Debian >= 7
pbuilder_bug=1
wait_lock=300

# for 'pkg-repo' script
# (BUILD_* variables go from Jenkins)
export BUILD_TAG
export BUILD_URL
export DEB_DISTRO
export GPG_KEY_URL

[ -f "$LAUNCHDIR/config.sh" ] && . "$LAUNCHDIR/config.sh"


mock_build() {
    local src name
    src="$1"
    name=`basename "$src" | sed -e 's/-[0-9].*//'`

    echo "==== Building $name ==== "
    touch "reports/fail.${name}"
    rm -f "reports/${name}-root.log" "reports/${name}-build.log" reports/root.log reports/build.log
    ln -s "${name}-root.log" reports/root.log
    ln -s "${name}-build.log" reports/build.log
    touch "reports/${name}-root.log" "reports/${name}-build.log"

    $BUILD_CMD --rebuild "$src"

    if [ "$do_sign" -eq 1 ]; then
      "$LAUNCHDIR"/pkg-repo --platform "$PLATFORM" reports/*.rpm
    else
      "$LAUNCHDIR"/pkg-repo --platform "$PLATFORM" --no-sign reports/*.rpm
    fi
    rm -f reports/*.rpm

    rm -f "reports/fail.${name}"
    rm -f reports/root.log reports/build.log
    echo "$name" >> reports/success.log
    echo "==== Done $name ===="
    was_build=1
}


pbuilder_build() {
    local src name builddir changes
    src="$1"
    name=`basename "$src" | sed -e 's/_[0-9].*//'`

    echo "==== Building $name ==== "
    touch "reports/fail.${name}"
    dpkg-source -x "$src"
    builddir=`find . -maxdepth 1 -type d -name "${name}-*" | head -n 1`
    (cd "$builddir"; $BUILD_CMD)
    mv ./*.build reports/
    changes=`find results/pbuilder -type f -name "${name}_*.changes" | head -n 1`

    if [ "$do_sign" -eq 1 ]; then
      "$LAUNCHDIR"/pkg-repo --platform "${PLATFORM}" $changes
    else
      "$LAUNCHDIR"/pkg-repo --platform "${PLATFORM}" --no-sign $changes
    fi
    rm -f "reports/fail.${name}"
    echo "$name" >> reports/success.log
    echo "==== Done $name ===="
    was_build=1
}


add() {
    local src name
    src=$1
    name=`basename "$src" | sed -e 's/_[0-9]\+.*//'`

    echo "==== Adding external $name ===="
    if [ "$do_sign" -eq 1 ]; then
      "$LAUNCHDIR"/pkg-repo --platform "${PLATFORM}" --external "$src"
    else
      "$LAUNCHDIR"/pkg-repo --platform "${PLATFORM}" --external --no-sign "$src"
    fi
    echo "==== Done external $name ===="
}


lock() {
    i=0
    while ! (set -o noclobber; echo "$$ $1" > $LOCKFILE) 2> /dev/null; do
        sleep 10
        i=$((i+1))
        if [ $i -ge $((wait_lock/10)) ]; then
          echo "Mock lockfile held by '`cat $LOCKFILE`'"
          exit 1
        fi
    done
    trap 'rm -f $LOCKFILE' INT TERM EXIT
}


unlock() {
    rm -f $LOCKFILE
    trap - INT TERM EXIT
}


TEMP=`getopt --name pkg-build-mock --options abcd:hip:Sw: --longoptions add,build,clean,dir,help,image,no-sign,platform:,wait: -- "$@"`
if [ $? != 0 ] ; then echo "Terminating." >&2 ; exit 1 ; fi
eval set -- "$TEMP"

usage() {
    cat << EOF
$0 [OPTIONS]

OPTIONS are:
  -h, --help ................ usage message
  -a, --add ................. add external dependencies (.rpm, .changes)
  -b, --build ............... perform build (default) (.spec, .dsc)
  -c, --clean ............... perform clean
  -d, --dir ................. working directory for build
  -i, --image ............... create chroot image
  -p, --platform PLATFORM ... build target platform (required)
  -S, --no-sign ............. don't sign packages
  -w, --wait ................ wait time for build lock [300]

PLATFORMS (OSFAMILY-VERSION-ARCH):
  epel-7-x86_64
  fedora-rawhide-x86_64
  debian-8-x86_64
  ubuntu-14-x86_64
EOF
}

while true; do
    case "$1" in
        -h | --help )
            usage
            exit 0
            ;;
        -a | --add )
            CMD='add'
            ;;
        -b | --build )
            CMD='build'
            ;;
        -c | --clean )
            do_clean=1
            ;;
        -d | --dir )
            cd "${2}"
            shift
            ;;
        -i | --image )
            do_image=1
            ;;
        -p | --platform )
            PLATFORM=$2
            shift
            ;;
        -S | --no-sign )
            do_sign=0
            ;;
        -w | --wait )
            wait_lock=$2
            shift
            ;;
        -- )
            shift
            break
            ;;
        * )
            break
            ;;
    esac
    shift
done

if [ -z "$PLATFORM" ]; then
    echo "Platform not specified"
    exit 1
fi

OSFAMILY=`echo "$PLATFORM" | cut -f1 -d-`
OSVER=`echo "$PLATFORM" | cut -f2 -d-`
ARCH=`echo "$PLATFORM" | cut -f3 -d-`
case "$OSFAMILY" in
    epel)
        BUILD_TYPE='mock'
        BUILD_CMD="mock --configdir=. -r $PLATFORM --resultdir `pwd`/reports"
        IMAGE_CMD="mock -r $PLATFORM --init"
        REPO="sl$OSVER"
        ;;
    fedora)
        BUILD_TYPE='mock'
        BUILD_CMD="mock --configdir=. -r $PLATFORM --resultdir `pwd`/reports"
        IMAGE_CMD="mock -r $PLATFORM --init"
        REPO="fc$OSVER"

        # for Fedora 26+ builds on EPEL 7
        if ! `which dnf 2>/dev/null`; then
            BUILD_CMD="$BUILD_CMD --yum"
            IMAGE_CMD="$IMAGE_CMD --yum"
        fi
        ;;
    debian|ubuntu)
        BUILD_TYPE='pbuilder'
        if [ "$pbuilder_bug" -eq 1 ]; then
            PDEBUILD_OPTS="$PDEBUILD_OPTS --use-pdebuild-internal"
        fi
        if [ "$do_sign" -eq 1 ]; then
            BUILD_CMD="pdebuild --buildresult `pwd`/results/pbuilder --auto-debsign --debsign-k $KEY_ID $PDEBUILD_OPTS -- --hookdir `pwd`/pbuilder --basetgz /var/cache/pbuilder/$PLATFORM.tgz $PBUILDER_OPTS"
        else
            BUILD_CMD="pdebuild --buildresult `pwd`/results/pbuilder $PDEBUILD_OPTS -- --hookdir `pwd`/pbuilder --basetgz /var/cache/pbuilder/$PLATFORM.tgz $PBUILDER_OPTS"
        fi

        case "$OSFAMILY-$OSVER" in
          debian-6) distcodename='squeeze' ;;
          debian-7) distcodename='wheezy' ;;
          debian-8) distcodename='jessie' ;;
          debian-9) distcodename='stretch' ;;
          debian-*) distcodename='sid' ;;
          ubuntu-12) distcodename='precise' ;;
          ubuntu-14) distcodename='trusty' ;;
          ubuntu-*) distcodename='xenial' ;;
        esac
        IMAGE_CMD="sudo pbuilder --create --hookdir $LAUNCHDIR/pbuilder --distribution $distcodename --basetgz /var/cache/pbuilder/${PLATFORM}.tgz"
        ;;
esac

# ==== clean (if requested) ====
if [ "$do_clean" -eq 1 ]; then
    for d in results reports; do
        [ -d $d ] && (rm -rfv $d || sudo rm -rfv $d)
    done

    "$LAUNCHDIR"/pkg-repo --platform "$PLATFORM" --clean

    if [ -z "$1" ]; then
      exit 0
    fi
fi


# setup
mkdir reports results 2>/dev/null || :
[ -f ./repos.sh ] || cp -p "$LAUNCHDIR"/repos.sh .
if [ "$BUILD_TYPE" = "pbuilder" ] ; then
    mkdir pbuilder 2>/dev/null || :
    cp -pn "$LAUNCHDIR"/pbuilder/* pbuilder/
    if [ "$pbuilder_bug" -eq 1 ]; then
      # required for --use-pdebuild-internal
      mkdir results/pbuilder 2>/dev/null || :
    fi
else
    # mock requires user path
    if [ "`which mock`" = "/usr/sbin/mock" ]; then
      export PATH="/usr/bin:$PATH"
    fi

    # for RHEL 5
    for f in logging.ini site-defaults.cfg; do
      [ -f /etc/mock/$f ] && cp -p /etc/mock/$f .
    done
fi
"$LAUNCHDIR"/pkg-repo --platform "$PLATFORM" --setup-chroot


# ==== chroot tarballs ====
if [ "$do_image" -eq 1 ]; then
    lock "prepare image $PLATFORM"
    $IMAGE_CMD
    unlock
fi


# ==== build ====
lock "build on $PLATFORM"
while [ -n "$1" ]; do
    case "$CMD" in
        add)
            add "$1"
            ;;
        build)
            if [ "$BUILD_TYPE" = "pbuilder" ]; then
                pbuilder_build "$1"
            else
                mock_build "$1"
            fi
            ;;
    esac
    shift
done
unlock


# ==== publish results ====
if [ -n "$was_build" ]; then
    # admit all the build errors and warnings to everyone
    chmod a+r reports/* || true

    if [ "$BUILD_TYPE" = "pbuilder" ]; then
        sudo rm -rfv results/pbuilder
        mkdir "results/$OSFAMILY/" 2>/dev/null || :
        cp -rvp ~/repository-artifacts/"$DEB_DISTRO" "results/$OSFAMILY/"
        (cd "results/$OSFAMILY/$DEB_DISTRO"; ls -1 *.tar.gz *.tar.xz *.dsc *.changes *.deb 2>/dev/null| sort) > list.txt
    else
        cp -rvp ~/repository-artifacts/* "results/"
        (cd results; ls -1 *.rpm 2>/dev/null | sort) > list.txt
    fi
fi
