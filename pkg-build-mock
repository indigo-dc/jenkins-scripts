#! /bin/bash -xe

#
# Script to build binary packages from prepared source packages in chroot
# environment.
#
# Local build and local external repositories are supported.
#
# ==== mock preparation ====
#
# moduser -a -A mock $LOGIN
# usermod -a -G mock $LOGIN
#
# tools: mock rpm-build rpm-sign
#
# ==== pbuilder preparation ====
#
# ln -s ~jenkins/.pbuilderrc /root/.pbuilderrc
# pbuilder --create --hookdir `pwd`/pbuilder --distribution jessie --basetgz /var/cache/pbuilder/debian-8-x86_64.tgz
#
# tools: dput mini-dinstall pbuilder
#

CMD='build'
DEBDISTRO=${DEBDISTRO:-stable}
DEBREPO_MAIN=${DEBREPO_MAIN:-~/debian}
DEBREPO_DEPS=${DEBREPO_DEPS:-~/debian-externals}
EXTERNAL_REPOS=' epel-5-x86_64 epel-5-i386 epel-6-x86_64 epel-6-i386 epel-7-x86_64 '
KEY_ID=${KEY_ID:-'64FA8786'}
LAUNCHDIR=`dirname $0`
LAUNCHDIR=`(cd $LAUNCHDIR; pwd)`
LOCKFILE='/tmp/pkg-build-mock.lock'
do_clean=0
do_image=0
do_sign=1

[ -f $LAUNCHDIR/config.sh ] && . $LAUNCHDIR/config.sh


mock_build() {
    local src="$1"
    local name=`basename "$src" | sed -e 's/-[0-9].*//'`

    echo "==== Building $name ==== "
    touch reports/fail.$name
    rm -f reports/$name-root.log reports/$name-build.log reports/root.log reports/build.log
    ln -s $name-root.log reports/root.log
    ln -s $name-build.log reports/build.log
    touch reports/$name-root.log reports/$name-build.log

    $BUILD_CMD --rebuild $src

    [ "$do_sign" -eq 1 ] && rpmsign --addsign reports/*.rpm
    mv reports/*.rpm results/
    createrepo_c results

    rm -f reports/fail.$name
    rm -f reports/root.log reports/build.log
    echo $name >> reports/success.log
    echo "==== Done $name ===="
    was_build=1
}


pbuilder_build() {
    local src="$1"
    local name=`basename "$src" | sed -e 's/_[0-9].*//'`
    local builddir
    local changes

    echo "==== Building name ==== "
    touch reports/fail.$name
    dpkg-source -x "$src"
    builddir=`find . -maxdepth 1 -type d -name $name-\* | head -n 1`
    (cd $builddir; $BUILD_CMD)
    mv *.build reports/
    changes=`find results/pbuilder -type f -name $name_\*.changes | head -n 1`
    # upload invalides the gpg sign
    rm -f $DEBREPO_MAIN/$DEBDISTRO/Release.gpg
    # buggy mini-dinstall?
    rm -f $DEBREPO_MAIN/*.db
    if [ "$do_sign" -eq 1 ]; then
        dput -U local $changes
        (cd $DEBREPO_MAIN/$DEBDISTRO; rm -f Release.gpg; gpg -abs -o Release.gpg Release)
    else
        dput -u -U local $changes
    fi
    rm -f reports/fail.$name
    echo $name >> reports/success.log
    echo "==== Done $name ===="
    was_build=1
}


add() {
    local src=$1
    local name=`basename "$src" | sed -e 's/_[0-9]\+.*//'`

    echo "==== Adding external $name ===="
    if test "$BUILD_TYPE" = "pbuilder"; then
         # upload invalides the gpg sign
         rm -f $DEBREPO_DEPS/$DEBDISTRO/Release.gpg
         # buggy mini-dinstall?
         rm -f $DEBREPO_DEPS/*.db
         if [ "$do_sign" -eq 1 ]; then
            dput -U local_externals $src
         else
            dput -u -U local_externals $src
         fi
    else
            cp -p $src externals/
            createrepo_c externals
    fi
    echo "==== Done external $name ===="
    was_external=1
}


lock() {
    i=0
    while ! (set -o noclobber; echo "$1 $$" > $LOCKFILE) 2> /dev/null; do
        sleep 10
        i=$((i+1))
        if [ $i -ge 6 ]; then
          echo "Mock lockfile held by '`cat $LOCKFILE`'"
          exit 1
        fi
    done
    trap 'rm -f $LOCKFILE' INT TERM EXIT
}


unlock() {
    rm -f $LOCKFILE
    trap - INT TERM EXIT
}


TEMP=`getopt --name mock2 --options abchip:S --longoptions add,build,clean,help,image,no-sign,platform: -- "$@"`
if [ $? != 0 ] ; then echo "Terminating." >&2 ; exit 1 ; fi
eval set -- "$TEMP"

usage() {
    cat << EOF
$0 [OPTIONS]

OPTIONS are:
  -h, --help ................ usage message
  -a, --add ................. add external dependencies (.rpm, .changes)
  -b, --build ............... perform build (default) (.spec, .dsc)
  -c, --clean ............... perform clean
  -i, --image ............... create chroot image
  -p, --platform PLATFORM ... build target platform (required)
  -S, --no-sign ............. don't sign packages

PLATFORMS (FAMILY-VERSION-ARCH):
  epel-7-x86_64
  fedora-rawhide-x86_64
  debian-8-x86_64
  ubuntu-14-x86_64
EOF
}

while true; do
    case "$1" in
        -h | --help )
            usage
            exit 0
            ;;
        -a | --add )
            CMD='add'
            ;;
        -b | --build )
            CMD='build'
            ;;
        -c | --clean )
            do_clean=1
            ;;
        -i | --image )
            do_image=1
            ;;
        -p | --platform )
            PLATFORM=$2
            shift
            ;;
        -S | --no-sign )
            do_sign=0
            ;;
        -- )
            shift
            break
            ;;
        * )
            break
            ;;
    esac
    shift
done

if [ -z "$PLATFORM" ]; then
    echo "Platform not specified"
    exit 1
fi

OSFAMILY=`echo $PLATFORM | cut -f1 -d-`
OSVER=`echo $PLATFORM | cut -f2 -d-`
ARCH=`echo $PLATFORM | cut -f3 -d-`
case "$OSFAMILY" in
    epel)
        BUILD_TYPE='mock'
        BUILD_CMD="mock --configdir=. -r $PLATFORM --resultdir `pwd`/reports"
        IMAGE_CMD="mock -r $PLATFORM --init"
        REPO="sl$OSVER"
        ;;
    fedora)
        BUILD_TYPE='mock'
        BUILD_CMD="mock --configdir=. -r $PLATFORM --resultdir `pwd`/reports"
        IMAGE_CMD="mock -r $PLATFORM --init"
        REPO="fc$OSVER"
        ;;
    debian|ubuntu)
        BUILD_TYPE='pbuilder'
        if [ "$do_sign" -eq 1 ]; then
            BUILD_CMD="pdebuild --buildresult `pwd`/results/pbuilder --auto-debsign --debsign-k $KEY_ID $PDEBUILD_OPTS -- --hookdir $LAUNCHDIR/pbuilder --basetgz /var/cache/pbuilder/$PLATFORM.tgz $PBUILDER_OPTS"
        else
            BUILD_CMD="pdebuild --buildresult `pwd`/results/pbuilder $PDEBUILD_OPTS -- --hookdir $LAUNCHDIR/pbuilder --basetgz /var/cache/pbuilder/$PLATFORM.tgz $PBUILDER_OPTS"
        fi
        case "$OSFAMILY-$OSVER" in
          debian-6) distname='squeeze' ;;
          debian-7) distname='wheezy' ;;
          debian-8) distname='jessie' ;;
          debian-9) distname='stretch' ;;
          debian-*) distname='sid' ;;
          ubuntu-12) distname='precise' ;;
          ubuntu-14) distname='trusty' ;;
          ubuntu-*) distname='xenial' ;;
        esac
        IMAGE_CMD="sudo pbuilder --create --hookdir $LAUNCHDIR/pbuilder --distribution $distname --basetgz /var/cache/pbuilder/${PLATFORM}.tgz"
        ;;
esac

# clean (if requested)
if [ "$do_clean" -eq 1 ]; then
    for d in results externals reports; do
        [ -d $d ] && (rm -rfv $d || sudo rm -rfv $d)
    done

    if [ "$BUILD_TYPE" = "pbuilder" ] ; then
        rm -rfv $DEBREPO_MAIN/* $DEBREPO_DEPS/*
    fi

    if [ -z "$1" ]; then
      exit 0
    fi
fi

# setup
mkdir reports 2>/dev/null || :
if [ "$BUILD_TYPE" = "pbuilder" ] ; then
    mkdir results 2>/dev/null || :
    # fragile mini-dinstall
    if [ ! -d $DEBREPO_MAIN/$DEBDISTRO ]; then
        mkdir -p $DEBREPO_MAIN/mini-dinstall/incoming
        mkdir -p $DEBREPO_MAIN/$DEBDISTRO
        touch $DEBREPO_MAIN/$DEBDISTRO/Packages
    fi
    if [ ! -d $DEBREPO_DEPS/$DEBDISTRO ]; then
        mkdir -p $DEBREPO_DEPS/mini-dinstall/incoming
        mkdir -p $DEBREPO_DEPS/$DEBDISTRO
        touch $DEBREPO_DEPS/$DEBDISTRO/Packages
    fi
else
    if [ ! -d results ]; then
        mkdir results
        createrepo_c results
    fi
    if [ ! -d externals ]; then
        mkdir externals
        createrepo_c externals
    fi
    if [ ! -f ${PLATFORM}.cfg ]; then
        sed -e 's/^"""\s*$//' /etc/mock/${PLATFORM}.cfg > ${PLATFORM}.cfg
        if echo "$EXTERNAL_REPOS" | grep -q " $PLATFORM "; then
            cat >> ${PLATFORM}.cfg <<EOF
[EGI-external]
name=EMI-3 External Dependencies
baseurl=http://scientific.zcu.cz/repos/EGI-external/$REPO-\$basearch
gpgkey=http://scientific.zcu.cz/repos/RPM-GPG-KEY-valtri
protect=1
priority=40
enabled=1

EOF
        fi
        cat >> ${PLATFORM}.cfg <<EOF
[local]
name=Local
baseurl=file://`pwd`/results
protect=1
priority=40

[local-ext]
name=External
baseurl=file://`pwd`/externals
protect=1
priority=40
"""
EOF
    fi
fi

if [ "$do_image" -eq 1 ]; then
    lock "prepare image $PLATFORM"
    $IMAGE_CMD
    unlock
fi

lock "build on $PLATFORM"
while [ -n "$1" ]; do
    case "$CMD" in
        add)
            add "$1"
            ;;
        build)
            if [ "$BUILD_TYPE" = "pbuilder" ]; then
                pbuilder_build "$1"
            else
                mock_build "$1"
            fi
            ;;
    esac
    shift
done
unlock

# copy the final repository at the finish (debian)
# (signing is continuous)
if [ -n "$was_build" ]; then
    if [ "$BUILD_TYPE" = "pbuilder" ]; then
            sudo rm -rfv results/pbuilder
            mkdir results/debian/ 2>/dev/null || :
            cp -rp $DEBREPO_MAIN/$DEBDISTRO results/debian/
    fi
    # admit all the build errors and warnings to everyone
    chmod a+r reports/* || true
fi

# mass sign externals repository at the finish
# (copying not needed)
if [ -n "$was_external" ]; then
    if [ "$BUILD_TYPE" = "pbuilder" ]; then
        [ "$do_sign" -eq 1 ] && (cd $DEBREPO_DEPS/$DEBDISTRO; rm -f Release.gpg; gpg -abs -o Release.gpg Release)
    else
        [ "$do_sign" -eq 1 ] && rpmsign --addsign externals/*.rpm
        createrepo_c externals
    fi
fi
